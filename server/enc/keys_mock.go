// Code generated by MockGen. DO NOT EDIT.
// Source: server/enc/keys.go
//
// Generated by this command:
//
//	mockgen -source server/enc/keys.go -destination server/enc/keys_mock.go -package enc
//

// Package enc is a generated GoMock package.
package enc

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKeyLike is a mock of KeyLike interface.
type MockKeyLike struct {
	ctrl     *gomock.Controller
	recorder *MockKeyLikeMockRecorder
	isgomock struct{}
}

// MockKeyLikeMockRecorder is the mock recorder for MockKeyLike.
type MockKeyLikeMockRecorder struct {
	mock *MockKeyLike
}

// NewMockKeyLike creates a new mock instance.
func NewMockKeyLike(ctrl *gomock.Controller) *MockKeyLike {
	mock := &MockKeyLike{ctrl: ctrl}
	mock.recorder = &MockKeyLikeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyLike) EXPECT() *MockKeyLikeMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockKeyLike) Encrypt(message string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockKeyLikeMockRecorder) Encrypt(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockKeyLike)(nil).Encrypt), message)
}
